import os
import sys
import time
import json
import random
import string
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt
from cryptography.hazmat.primitives import hashes, hmac
from cryptography.hazmat.primitives.ciphers.aead import AESGCM


print("""
                                                                                                                       
 ██▓███   ▄▄▄        ██████   ██████  █     █░ ▒█████   ██▀███  ▓█████▄  ██▒   █▓ ▄▄▄       █    ██  ██▓    ▄▄▄█████▓   
▓██░  ██▒▒████▄    ▒██    ▒ ▒██    ▒ ▓█░ █ ░█░▒██▒  ██▒▓██ ▒ ██▒▒██▀ ██▌▓██░   █▒▒████▄     ██  ▓██▒▓██▒    ▓  ██▒ ▓▒   
▓██░ ██▓▒▒██  ▀█▄  ░ ▓██▄   ░ ▓██▄   ▒█░ █ ░█ ▒██░  ██▒▓██ ░▄█ ▒░██   █▌ ▓██  █▒░▒██  ▀█▄  ▓██  ▒██░▒██░    ▒ ▓██░ ▒░   
▒██▄█▓▒ ▒░██▄▄▄▄██   ▒   ██▒  ▒   ██▒░█░ █ ░█ ▒██   ██░▒██▀▀█▄  ░▓█▄   ▌  ▒██ █░░░██▄▄▄▄██ ▓▓█  ░██░▒██░    ░ ▓██▓ ░    
▒██▒ ░  ░ ▓█   ▓██▒▒██████▒▒▒██████▒▒░░██▒██▓ ░ ████▓▒░░██▓ ▒██▒░▒████▓    ▒▀█░   ▓█   ▓██▒▒▒█████▓ ░██████▒  ▒██▒ ░    
▒▓▒░ ░  ░ ▒▒   ▓▒█░▒ ▒▓▒ ▒ ░▒ ▒▓▒ ▒ ░░ ▓░▒ ▒  ░ ▒░▒░▒░ ░ ▒▓ ░▒▓░ ▒▒▓  ▒    ░ ▐░   ▒▒   ▓▒█░░▒▓▒ ▒ ▒ ░ ▒░▓  ░  ▒ ░░      
░▒ ░       ▒   ▒▒ ░░ ░▒  ░ ░░ ░▒  ░ ░  ▒ ░ ░    ░ ▒ ▒░   ░▒ ░ ▒░ ░ ▒  ▒    ░ ░░    ▒   ▒▒ ░░░▒░ ░ ░ ░ ░ ▒  ░    ░       
░░         ░   ▒   ░  ░  ░  ░  ░  ░    ░   ░  ░ ░ ░ ▒    ░░   ░  ░ ░  ░      ░░    ░   ▒    ░░░ ░ ░   ░ ░     ░         
               ░  ░      ░        ░      ░        ░ ░     ░        ░          ░        ░  ░   ░         ░  ░            
                                                                 ░           ░                                          
""")


symbols = ["!","£","$","%","^","&","*","#","@","?"]
chars = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o",
         "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",
         "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S",
         "T", "U", "V", "W", "X", "Y", "Z"]


def findUsbPath():
    for letter in string.ascii_uppercase:
        path = f"{letter}:\\PasswordVault"
        if os.path.exists(path):
            return path
    raise Exception("USB path not found")

path = findUsbPath()
findUsbPath()

def decryptVault(key: bytes):
    with open(os.path.join(path, "vault.enc"), "rb") as f:
        data = f.read()
    nonce, ciphertext = data[:12], data[12:]
    aesgcm = AESGCM(key)
    decrypted = aesgcm.decrypt(nonce, ciphertext, None)
    return json.loads(decrypted)
    
def encryptVault(key:bytes, vaultData: dict) -> bytes:
    aesgcm = AESGCM(key)
    nonce = os.urandom(12)
    jsonData = json.dumps(vaultData).encode()
    encrypted = aesgcm.encrypt(nonce, jsonData, None)
    return nonce + encrypted
    
    
def main():

    masterPassword = input("Enter your password: ")
    os.system('cls' if os.name == 'nt' else 'clear')
    try:
        key = masterPasswordCheck(masterPassword)
        vault = decryptVault(key)
                
        while True:
            try:
                menuChoice = input("""
                                   
Secure Mode Activated  (̿▀̿ ̿Ĺ̯̿̿▀̿ ̿)̄ 
                             
         -=Hello=-
And welcome to PasswordVault          
                                
    New entry         | -start
    Display Passwords | -vault
    Exit              | -exit
        
you: """).lower()                          
                                
                # addNewEntry = input("Would you like to add a new entry? y/n \n").upper()
                if menuChoice == "-start":
                    start = input("Would you like to add a new entry? y/n").upper()
                    if start == "Y":
                        addEntry(vault)
                        saveVault(key, vault)
                        print("PasswordVault has been updated and successfully saved")
                        
                elif menuChoice == "-vault":
                    key = masterPasswordCheck(masterPassword)
                    vault = decryptVault(key)
                    
                    
                    print(json.dumps(vault, indent=2))      
                    time.sleep(30)
                    os.system('cls' if os.name == 'nt' else 'clear')
                    
                elif menuChoice == "-exit":
                    print(f"Exiting program, thanks for using PasswordVault")
                    sys.exit(0)
                                 
                else:
                    print("Invalid input, try again.")
                    
            except ValueError as e: print("error:", e)    

    except ValueError as e: print("There was an error saving / updating PasswordVault / Password Issue", e)    
        
        
def addEntry(vault: dict):
    while True:
        try:
            serviceName = input("Enter the service name (e.g., Gmail, Discord): ")        
            username = input("Enter your username: ")
            
            print("Password length must be between 5 and 32 characters.")
            passwordCheck = input("Would you like a randomly generated password? (Y/N): ").upper()

            if passwordCheck == "Y":
                passLen = int(input("Password length: "))
                if not (5 <= passLen <= 32):
                    print("Password length must be between 5 and 32.")
                    continue

                currentPassword = []
                symbolAmount = max(1, passLen // 3)

                symbolCheck = input("Include symbols in the password? (Y/N): ").upper()
                if symbolCheck == "Y":
                    symbolDec = input(f"How many symbols should your password include? (press Enter for recommended {symbolAmount}): ")

                    if symbolDec.strip() == "":
                        useSymbols = symbolAmount
                    else:
                        useSymbols = int(symbolDec.strip())
                    
                    for _ in range(useSymbols):
                        currentPassword.append(random.choice(symbols))
                    for _ in range(passLen - useSymbols):
                        currentPassword.append(random.choice(chars))
                else:
                    for _ in range(passLen):
                        currentPassword.append(random.choice(chars))

                random.shuffle(currentPassword)
                password = ''.join(currentPassword)
                print(f"\nGenerated password: {password}")

            else:
                password = input("Enter your password: ")

            vault[serviceName] = {
                "username": username,
                "password": password
            }

            print(f"Credentials for {serviceName} have been saved! \n")
            break  

        except ValueError:
            print("Invalid input. Please enter a number where expected.")
            
    
def saveVault(key: bytes, vault: dict):
    encrypted = encryptVault(key, vault)
    with open(os.path.join(path, "vault.enc"), "wb") as f:
        f.write(encrypted)


def masterPasswordCheck(inputPassword: str) -> bytes:
    salt = loadSalt()
    key = deriveKey(inputPassword, salt)

    with open(os.path.join(path, "verify.hash"), "rb") as f: 
        expected = f.read()

    h = hmac.HMAC(key, hashes.SHA256())
    h.update(b"check vault")

    try:
        h.verify(expected)
        return key
    except Exception:
        raise ValueError("Invalid master password")

def deriveKey (password: str, salt: bytes) -> bytes:
    kdf = Scrypt(salt=salt, length=32, n=2**14, r=8, p=1)
    return kdf.derive(password.encode())
    
def loadSalt():
    with open(os.path.join(path, "salt.bin"), "rb") as f:
        return f.read()

if __name__ == "__main__":
    main()
